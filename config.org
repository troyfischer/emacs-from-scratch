#+title: Emacs Configuration
#+author: Troy Fischer

* Straight
Straight handles packages. I can do sophisticated stuff like pull directly from github or pin a package to a commit hash.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
  
;; Disable package.el in favor of straight.el
(setq package-enable-at-startup nil)

(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
             :custom (straight-use-package-by-default t))
#+end_src

* Evil
Provides vim-like key bindings everywhere.

Github readme for all things evil: [[https://github.com/noctuid/evil-guide][Evil Help]]

#+begin_src emacs-lisp
;; Evil Mode
(use-package evil
  :config
  (evil-mode 1))
(setq evil-want-C-u-scroll t) ;; this isn't working for me atm
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
(require 'evil)

;; keybindings using leader key
(use-package general
  :config 
  (general-evil-setup t)
  (general-evil-define-key 'normal 'global
    :prefix "SPC"))

;; Exit insert mode by pressing j and then k quickly
(use-package key-chord)
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
(key-chord-mode 1)

;; start all buffers in evil-normal-mode please
(setq evil-normal-state-modes
      (append evil-emacs-state-modes
              evil-insert-state-modes
              evil-normal-state-modes
              evil-motion-state-modes))
			  
;; unbind space, return, and tab in evil mode
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
  
;; Use evil in ibuffer
(setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
#+end_src
* General
** Garbage Collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
(use-package gcmh)
(gcmh-mode 1)
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
		  (lambda ()
			(message "*** Emacs loaded in %s with %d garbage collections."
					(format "%.2f seconds"
						(float-time
							(time-subtract after-init-time before-init-time)))
					gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Themes
#+begin_src emacs-lisp
;; Doom themes
(use-package doom-themes)
(load-theme 'doom-dracula t)

;; Doom modeline
(use-package doom-modeline)
(doom-modeline-mode 1)
#+end_src
** Line Numbering
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** Tool Bars
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src
** Window Movement
#+begin_src emacs-lisp
;; switch between open frames
(use-package switch-window)

(winner-mode 1)
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  "w" '(:ignore t :which-key "Window")
  ;; Window splits
  "w d"   '(evil-window-delete :which-key "Close window")
  "w n"   '(evil-window-new :which-key "New window")
  "w s"   '(evil-window-split :which-key "Horizontal split window")
  "w v"   '(evil-window-vsplit :which-key "Vertical split window")
  ;; Window motions
  "w h"   '(evil-window-left :which-key "Window left")
  "w j"   '(evil-window-down :which-key "Window down")
  "w k"   '(evil-window-up :which-key "Window up")
  "w l"   '(evil-window-right :which-key "Window right")
  "w w"   '(evil-window-next :which-key "Goto next window")
  ;; winner mode
  "w <left>"  '(winner-undo :which-key "Winner undo")
  "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src
** Code Evaluation
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  "e" '(:ignore t :which-key "Evaluate")
  "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
  "e d"   '(eval-defun :which-key "Eval defun")
  "e e"   '(eval-expression :which-key "Eval elisp expression")
  "e l"   '(eval-last-sexp :which-key "Eval last sexpression")
  "e r"   '(eval-region :which-key "Eval region")) 
#+end_src
** Buffers
#+begin_src emacs-lisp
;; buffers
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src
** Scrolling
#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  "d"   '(:ignore t :which-key "Dired")
  "d d" '(dired :which-key "Open dired")
  "d j" '(dired-jump :which-key "Dired jump to current")
  "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* Org
#+begin_src emacs-lisp
(setq org-return-follows-link t) ;; RETURN will follow links in org-mode files

(nvmap :states '(normal) :keymaps 'override :prefix "SPC"
  "o"   '(:ignore t :which-key "Org")
  "o l" '(org-insert-link :which-key "Insert Link"))
#+end_src

* Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
		  which-key-sort-order #'which-key-key-order-alpha
		  which-key-sort-uppercase-first nil
		  which-key-add-column-padding 1
		  which-key-max-display-columns nil
		  which-key-min-display-lines 6
		  which-key-side-window-slot -10
		  ;;which-key-side-window-max-height 0.25
		  which-key-idle-delay 0.8
		  which-key-max-description-length 25
		  which-key-allow-imprecise-window-fit t
		  which-key-separator " → "))
(add-to-list 'load-path "~/.emacs.d/straight/repos/emacs-which-key")
(which-key-mode)
#+end_src
* Files
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(find-file :which-key "Find file")
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file")))
#+end_src

* Org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . org-indent-mode)
  :bind (("M-k" . org-move-subtree-up)
         ("M-j" . org-move-subtree-down))
  :config
  (setq org-ellipsis "…"
	org-hide-emphasis-markers t
	org-journal-date-format "%B %d, %Y (%A) "
	org-journal-file-format "%Y-%m-%d.org"
	org-src-preserve-indentation nil
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-directory "~/Org/"
	org-agenda-files '("~/Org/agenda.org")
	org-default-notes-file (expand-file-name "notes.org" org-directory))
     
  )

;; (use-package org-bullets
;;   :hook (org-mode . (lambda () (org-bullets-mode 1))))

(require 'org-tempo nil t)
#+end_src
** Source Blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src
* Ivy (Counsel/Swiper)
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config
  (counsel-mode))
(use-package ivy
  :defer 0.1
  :diminish
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window)
   ("C-j" . ivy-next-line)
   ("C-k" . ivy-previous-line))
  :custom
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode)
  (setq ivy-initial-inputs-alist nil))
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)))

(use-package ivy-posframe
  :init
  (setq ivy-posframe-display-functions-alist
    '((swiper                     . ivy-posframe-display-at-point)
      (complete-symbol            . ivy-posframe-display-at-point)
      (counsel-M-x                . ivy-display-function-fallback)
      (counsel-esh-history        . ivy-posframe-display-at-window-center)
      (counsel-describe-function  . ivy-display-function-fallback)
      (counsel-describe-variable  . ivy-display-function-fallback)
      (counsel-find-file          . ivy-display-function-fallback)
      (counsel-recentf            . ivy-display-function-fallback)
      (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
      (dmenu                      . ivy-posframe-display-at-frame-top-center)
      (nil                        . ivy-posframe-display))
    ivy-posframe-height-alist
    '((swiper . 20)
      (dmenu . 20)
      (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
  
(use-package smex
 :config
 (smex-initialize))

#+end_src
* Eshell
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "e h"   '(counsel-esh-history :which-key "Eshell history")
       "e s"   '(eshell :which-key "Eshell"))
#+end_src

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
* Writeroom
Let's bind this to a key...
#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src
* Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "God damn you look good today.")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; emacs client should always open dashboard
#+end_src
